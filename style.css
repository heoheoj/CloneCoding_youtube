:root{
    /* :root 가상 클래스  
    root는 html css보다 항상 위에 있다.
    그러므로 root에서는 문서 전반에 걸쳐 재사용할 값들을 변수로 선언하여 사용한다.    
    */

    /*color */
    --white-color:white;
    --black-color:black;
    --blue-color:#045fd4;
    --red-color:#ff0000;
    --grey-dark-color:#909090;
    --grey-light-color:#e0e0e0;


    /* size */
    --padding: 12px;    
    --avatar-size: 36px; /*유튜버 프로필 사이즈 */

    /* Font Size */
    --font-large: 18px;
    --font-medium: 14px;
    --font-small: 12px;
    --font-micro: 10px;
}

*{ /*전체 태크에 지정할 속성 */
    padding: 0; /*안쪽 여백 */
    margin: 0; /*바깥쪽 여백*/
    box-sizing: border-box; /*padding과 margin을 포함한 크기로 box-sizing을 지정한다. */
}

body{
    /* 폰트 이름 지정 */
    font-family: Roboto; 
}

ul{
    /* 리스트 형식인 앞에 점을 없애준다. */
    list-style: none; 
}

button,
button:focus{
    border: none;
    cursor: pointer;
    outline: none;
    background-color: white;
}

header {
  /*   display: 화면에서 보여지는 방식
    flex : 자식 요소를 모두 inline-block으로 설정 */
    /* 가로로 정렬 */
    display: flex; 
    justify-content: space-between;
    padding: var(--padding);
    background-color: var(--black-color);
    color: var(--white-color); 
}

header .logo {
    font-size: var(--font-large);
}

header .logo i {
    color: var(--red-color);
}

header .icons .fa-search {
    margin-right: var(--padding);
}



.player {
    position: sticky;/*스크롤 다운해도 위에 딱 붙게*/
    top: 0;
    text-align: center;
    background-color: var(--black-color);
}

.player video{
    width: 100%;
    height: 100%;
    max-width: 1000px;
}


/* upNext .info와 겹치지 않게 */
body >.info{
    /* 전체적으로 여백이 적으므로 padding을 준다. */
    padding: var(--padding);
}
.info .metadata .hashtags{
    display: flex;
    color: var(--blue-color);
    font-size: var(--font-small);
}

.info .metadata .hashtags li{
    margin-right: var(--padding);
}

.info .metadata .titleAndButton{
    display: flex;
}
.info .metadata .titleAndButton .title{
    font-size: var(--font-medium);
    
   display: -webkit-box;
   -webkit-box-orient: vertical;
   -webkit-line-clamp: 2;
   overflow: hidden;    
}

.info .metadata .titleAndButton .moreBtn{
    background-color: white;
    border: none;
    height: 100%;
}

.info .views{
    font-size: var(--font-micro);
    color: var(--grey-dark-color);
}

.actions {
    display: flex;
    justify-content: space-around;
    /* 좌우에 패딩 상하는 0 */
    margin: var(--padding) 0; 

}

.info .actions button {
    display: flex;
    flex-direction: column;
    font-size: var(--font-small);
    color: var(--grey-dark-color);

}

.info .actions button i {
    margin-bottom: calc(var(--padding)/2);
    /* 상하는 0으로 좌우는 auto로 지정하면 item내에서 가운데로 정렬해준다. */
    margin: 0 auto;
    font-size: 16px;
}

/* 버튼을 선택했을 때 효과를 줄때 .active사용 */
.info .actions button i.active{
    color: var(--blue-color);
}

/* Channel Descripton */
.channel {
    display: flex;
    justify-content: space-between;/*양쪽으로 갈라지게*/
    /* 위아래로 실선 */
    border-top: 1px solid var(--grey-light-color);
    border-bottom: 1px solid var(--grey-light-color);
    
}

.channel .metadata {
    display: flex;
    align-items: center;/*이미지랑 글자랑 높이 맞춰주기*/
}

.channel .metadata .info{
    /* 가로방향으로 하나씩 배치된다. */
    display: flex;
    /* 위 아래로 정렬해준다. */
    flex-direction: column; 
}

.channel .metadata img {
    width: var(--avatar-size);
    height: var(--avatar-size);
    /* 동그라미 */
    border-radius: 50%;
}

.channel .metadata .info .name {
    font-size: var(--font-medium);

}

.channel .metadata .info .subscribers {
    font-size: var(--font-small);
    color: var(--grey-dark-color);
}

.channel .subscribe {
    /* 대문자로 변환 */
    text-transform: uppercase;
    color: var(--red-color);
    font-size: medium;

}


.upNext{
    padding: 0 var(--padding);
}
/* 
span은 width height 를 지정하지 못한다. inline이기 때문에
inline요소인데 해당 속성을 지정하고 싶으면 block요소가 되면 된다. */
.upNext > .title{
    color: var(--grey-dark-color);
    font-size: var(--font-small);
}


.upNext .item{
    display: flex;
    margin-top: var(--padding);
    /* padding: var(--padding); */
}

/* .upNext .item img{
    
    flex: 1 1 35%;
    width: 100%;
    padding: var(--padding);
} 
img태그만 이용할때와 
아래와 같이 img 태그를 박스로 감싸서 정렬할때 차이를 생각하기 
박스를 사용하지 않으면 정렬이 어긋날 수 있다.
*/




.upNext .item .img {
    flex: 1 1 35%;
    margin-right: var(--padding);
}

.upNext .item .img img {
    width: 100%;
}


.upNext .item .info{
    flex: 1 1 60%;
    display: flex;
    flex-direction: column;
}

.upNext .item .moreBtn{
    flex: 1 1 5%;
}

.upNext .item .name,
.upNext .item .views{
    
    font-size: var(--font-micro);
    color: var(--grey-dark-color);
}


.infoAndUpNext{
    display: flex;
    flex-direction: column;
}

/* 화면이 768이상일때 아래 속성의 적용시킨다. */
@media screen and (min-width:768px) {
    .infoAndUpNext{
        flex-direction: row;
        margin: var(--padding) 0;
    }
}











